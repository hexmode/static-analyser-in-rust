* Create a Static Analyser in Rust
  :PROPERTIES:
  :CUSTOM_ID: create-a-static-analyser-in-rust
  :END:

This project builds on [[https://github.com/Michael-F-Bryan/static-analyser-in-rust][Michael Bryan's experiment]] but makes some different decisions about the implementation.  For example, I'm writing the README using [[https://orgmode.org/][Org Mode]] rather than Markdown.  It is still an experiment in using /literate programming/ to write a static analysis, but I'll be using tools I'm familiar with (e.g. Emacs, Org-Mode) and free software like [[https://www.freepascal.org/][Free Pascal]] instead of Delphi.

The main goal for me is using this exercise to learn a bit about building a parser in Rust, but I'll also use this project to demonstrate other things as well.

** Building
   :PROPERTIES:
   :CUSTOM_ID: building
   :END:
If you want to build and read this locally you'll need to have the
following installed:

- Rust (via [[https://rustup.rs/][rustup]])
- tango (=cargo install tango=)
- mdbook (=cargo install mdbook=)

If you've freshly cloned the repo then =src/lib.rs= won't yet exist.
Cargo doesn't particularly like this, so we need to manually run =tango=
to generate the Rust code.

#+begin_example
$ tango
#+end_example

If you look at the =src/= directory you'll see two copies of everything,
one in markdown (=*.md=) and the other in Rust (=*.rs=). If there are
ever any compile errors, it's often super useful to be able to look at
the actual source code being compiled.

If you want to look at the book version of the code, you'll need to run
=mdbook=.

#+begin_example
$ mdbook build --open
#+end_example

And the =rustdoc= documentation can be viewed the usual way.

#+begin_example
$ cargo doc --open
#+end_example
