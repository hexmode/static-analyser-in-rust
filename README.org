* Create a Static Analyser in Rust
  :PROPERTIES:
  :CUSTOM_ID: create-a-static-analyser-in-rust
  :END:

This project builds on [[https://github.com/Michael-F-Bryan/static-analyser-in-rust][Michael Bryan's experiment]] but makes some different decisions about the implementation.  For example, I'm writing the README using [[https://orgmode.org/][Org Mode]] rather than Markdown.  It is still an experiment in using /literate programming/ to write a static analysis, but I'll be using tools I'm familiar with (e.g. Emacs, Org-Mode) and free software like [[https://www.freepascal.org/][Free Pascal]] instead of Delphi.

The main goal for me is using this exercise to learn a bit about building a parser in Rust, but I'll also use this project to demonstrate other things as well.

** Building
   :PROPERTIES:
   :CUSTOM_ID: building
   :END:
If you want to build and read this locally you'll need to have the following installed:

- Rust and cargo (via [[https://rustup.rs/][rustup]])
- [[https://www.gnu.org/software/make/][make]] (to use the Makefile)
- [[https://www.gnu.org/software/emacs/][emacs]] (to extract the Rust source files from the documentation and put documentation in a format suitable for =cargo doc=)

If you have [[https://doc.rust-lang.org/cargo/getting-started/installation.html][cargo]] set up (and the your =$PATH= properly configured), the Makefile will also prompt you to install the following tools if they are not already installed:

- [[https://rust-lang.github.io/mdBook/guide/installation.html][mdbook]] (to produce the rustdoc-usable documentation)
- [[https://github.com/BurntSushi/ripgrep#installation][ripgrep]] (optional, will be installed by cargo if needed)

Since this is literate programming, we have to extract the source from the documentation.  To do that, we'll use =make= to handle the builds and invoke =cargo= rather than directly invoking =cargo=.

For example, if you've freshly cloned the repo then =src/lib.rs= won't yet exist. Cargo doesn't particularly like this, so a make file target— =tangle= —exists for this specific purpose.

#+begin_example
$ make tangle
Tangled 1 code block from analysis.org
Tangled 8 code blocks from codemap.org
Tangled 3 code blocks from driver.org
Tangled 1 code block from errors.org
Tangled 18 code blocks from lex.org
Tangled 9 code blocks from lib.org
Tangled 1 code block from lowering.org
Tangled 4 code blocks from ast.org
Tangled 3 code blocks from macros.org
Tangled 2 code blocks from mod.org
Tangled 7 code blocks from parser.org
#+end_example

(This target is, of course, invoked when you build the project using =make build=.)

If you look at the =src/= directory you'll see three similarly named sets of files for each component: one is the original org file (=*,org=), one in markdown (=*.md=) which is used to produced, and the other in Rust (=*.rs=). If there are ever any compile errors, it's often super useful to be able to look at the actual source code being compiled.

If you want to look at the book version of the code, you'll need to run =mdbook= which you can do using the =build-docs= target:

#+begin_example
$ make build-docs
2023-02-11 20:26:52 [INFO] (mdbook::book): Book building has started
2023-02-11 20:26:52 [INFO] (mdbook::book): Running the html backend
#+end_example

And the =rustdoc= documentation can be viewed the usual way or with the =open= target:

#+begin_example
$ make open
#+end_example
